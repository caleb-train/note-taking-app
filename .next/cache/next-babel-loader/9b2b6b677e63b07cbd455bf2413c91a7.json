{"ast":null,"code":"import * as actions from \"./actionTypes\";\nimport { axiosCall as axios } from \"../../utils\";\n/* START ACTIONS */\n\nexport const ListNotes = payload => ({\n  type: actions.LIST_NOTES,\n  payload\n});\nexport const GetNote = payload => ({\n  type: actions.GET_NOTE,\n  payload\n});\nexport const CreateNote = payload => ({\n  type: actions.CREATE_NOTE,\n  payload\n});\nexport const UpdateNote = payload => ({\n  type: actions.UPDATE_NOTE,\n  payload\n});\nexport const DeleteNote = payload => ({\n  type: actions.DELETE_NOTE,\n  payload\n});\nexport const EditNote = payload => ({\n  type: actions.EDIT_NOTE,\n  payload\n});\nexport const ErrorNote = payload => ({\n  type: actions.FETCH_ERROR,\n  payload\n});\nexport const Reset = (payload = {}) => ({\n  type: actions.RESET,\n  payload\n});\n/* END ACTIONS */\n\n/* START THUNKS */\n\nexport const ListNotesAsync = _ => {\n  return dispatch => {\n    dispatch(Reset());\n    dispatch(EditNote({\n      isLoading: true\n    }));\n    console.log('ssss');\n    axios({\n      path: 'notes/'\n    }).then(res => dispatch(ListNotes(res.data))).catch(message => dispatch(ErrorNote({\n      message\n    })));\n  };\n};\nexport const GetNoteAsync = id => {\n  return dispatch => {\n    dispatch(Reset());\n    dispatch(EditNote({\n      isLoading: true\n    }));\n    axios({\n      path: `note/${id}`\n    }).then(res => dispatch(GetNote({\n      data: res.data,\n      editNote: res.data[0],\n      message: res.message\n    }))).catch(message => dispatch(ErrorNote({\n      message\n    })));\n  };\n};\nexport const CreateNoteAsync = payload => {\n  return dispatch => {\n    dispatch(EditNote({\n      isLoading: true\n    }));\n    return axios({\n      method: 'POST',\n      path: `note`,\n      payload\n    }).then(res => {\n      console.log(res);\n      dispatch(CreateNote({\n        message: res.message\n      }));\n    }).catch(message => {\n      console.log(message);\n      dispatch(ErrorNote({\n        message\n      }));\n    });\n  };\n};\nexport const UpdateNoteAsync = payload => {\n  return dispatch => {\n    dispatch(EditNote({\n      isLoading: true\n    }));\n    axios({\n      method: 'PATCH',\n      path: `note/${payload.id}`,\n      payload\n    }).then(res => dispatch(UpdateNote({\n      message: res.message\n    }))).catch(message => dispatch(ErrorNote({\n      message\n    })));\n  };\n};\nexport const DeleteNoteAsync = id => {\n  return dispatch => {\n    dispatch(EditNote({\n      isLoading: true\n    }));\n    axios({\n      method: 'DELETE',\n      path: `note/${id}`\n    }).then(res => {\n      dispatch(DeleteNote({\n        data: [null],\n        message: res.message\n      }));\n      dispatch(ListNotesAsync(dispatch));\n    }).catch(message => dispatch(ErrorNote({\n      message\n    })));\n  };\n};\n/* END THUNKS */","map":{"version":3,"sources":["C:/Users/Ewere/Documents/challenges/seamfix/note-taking-app/src/store/actions/noteActions.js"],"names":["actions","axiosCall","axios","ListNotes","payload","type","LIST_NOTES","GetNote","GET_NOTE","CreateNote","CREATE_NOTE","UpdateNote","UPDATE_NOTE","DeleteNote","DELETE_NOTE","EditNote","EDIT_NOTE","ErrorNote","FETCH_ERROR","Reset","RESET","ListNotesAsync","_","dispatch","isLoading","console","log","path","then","res","data","catch","message","GetNoteAsync","id","editNote","CreateNoteAsync","method","UpdateNoteAsync","DeleteNoteAsync"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\nimport {\r\n  axiosCall as axios\r\n} from '@utils'\r\n\r\n/* START ACTIONS */\r\nexport const ListNotes = payload => ({\r\n  type: actions.LIST_NOTES,\r\n  payload\r\n})\r\n\r\nexport const GetNote = payload => ({\r\n  type: actions.GET_NOTE,\r\n  payload\r\n})\r\n\r\nexport const CreateNote = payload => ({\r\n  type: actions.CREATE_NOTE,\r\n  payload\r\n})\r\n\r\nexport const UpdateNote = payload => ({\r\n  type: actions.UPDATE_NOTE,\r\n  payload\r\n})\r\n\r\nexport const DeleteNote = payload => ({\r\n  type: actions.DELETE_NOTE,\r\n  payload\r\n})\r\n\r\n\r\nexport const EditNote = payload => ({\r\n  type: actions.EDIT_NOTE,\r\n  payload\r\n})\r\n\r\nexport const ErrorNote = payload => ({\r\n  type: actions.FETCH_ERROR,\r\n  payload\r\n})\r\n\r\nexport const Reset = (payload = {}) => ({\r\n  type: actions.RESET,\r\n  payload\r\n})\r\n/* END ACTIONS */\r\n\r\n/* START THUNKS */\r\nexport const ListNotesAsync = _ => {\r\n  return dispatch => {\r\n    dispatch(Reset())\r\n    dispatch(EditNote({\r\n      isLoading: true\r\n    }))\r\n    console.log('ssss')\r\n    axios({\r\n        path: 'notes/'\r\n      })\r\n      .then(res => dispatch(ListNotes(res.data)))\r\n      .catch(message => dispatch(ErrorNote({\r\n        message\r\n      })))\r\n  }\r\n}\r\n\r\nexport const GetNoteAsync = (id) => {\r\n  return dispatch => {\r\n    dispatch(Reset())\r\n    dispatch(EditNote({\r\n      isLoading: true\r\n    }))\r\n    axios({\r\n        path: `note/${id}`\r\n      })\r\n      .then(res => dispatch(GetNote({\r\n        data: res.data,\r\n        editNote: res.data[0],\r\n        message: res.message\r\n      })))\r\n      .catch(message => dispatch(ErrorNote({\r\n        message\r\n      })))\r\n\r\n  }\r\n}\r\n\r\nexport const CreateNoteAsync = payload => {\r\n  return dispatch => {\r\n    dispatch(EditNote({\r\n      isLoading: true\r\n    }))\r\n    return axios({\r\n        method: 'POST',\r\n        path: `note`,\r\n        payload,\r\n      })\r\n      .then(res => {\r\n        console.log(res)\r\n        dispatch(CreateNote({\r\n          message: res.message\r\n        }))\r\n      })\r\n      .catch(message => {\r\n        console.log(message)\r\n        dispatch(ErrorNote({\r\n          message\r\n        }))\r\n      })\r\n  }\r\n}\r\n\r\nexport const UpdateNoteAsync = (payload) => {\r\n  return dispatch => {\r\n    dispatch(EditNote({\r\n      isLoading: true\r\n    }))\r\n    axios({\r\n        method: 'PATCH',\r\n        path: `note/${payload.id}`,\r\n        payload,\r\n      })\r\n      .then(res => dispatch(UpdateNote({\r\n        message: res.message\r\n      })))\r\n      .catch(message => dispatch(ErrorNote({\r\n        message\r\n      })))\r\n  }\r\n}\r\n\r\n\r\nexport const DeleteNoteAsync = (id) => {\r\n  return dispatch => {\r\n    dispatch(EditNote({\r\n      isLoading: true\r\n    }))\r\n    axios({\r\n        method: 'DELETE',\r\n        path: `note/${id}`\r\n      })\r\n      .then(res => {\r\n        dispatch(DeleteNote({\r\n          data: [null],\r\n          message: res.message\r\n        }))\r\n        dispatch(ListNotesAsync(dispatch))\r\n      })\r\n      .catch(message => dispatch(ErrorNote({\r\n        message\r\n      })))\r\n  }\r\n\r\n}\r\n\r\n/* END THUNKS */"]},"metadata":{},"sourceType":"module"}